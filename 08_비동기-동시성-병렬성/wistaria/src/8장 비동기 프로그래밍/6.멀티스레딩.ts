// ! 브라우저와 서버에서 안전하게 병렬프로그램을 구현하는 패턴

/*
웹워커는 브라우저에서 멀티스레딩 작업을 폭넓게 지원하는 기능으로 진정한 병렬실행을 실현할 수 있다.
프로미스나 셋타임아웃같은 비동기api는 동시성을 제공하지만, 워커는 코드를 다른 cpu스레드에서 병렬로 실행하도록 해준다.
웹워커는 브라우저 제공 api로 메모리 안전성에 주안점을 둔다. 같은 영역의 메모리를 여러 스레드에서 동시에 읽고 쓰려하면 비결정성이나 데드록 같은 온갖 병렬 문제에 직면한다.

웹워커는 브라우저에서 동작하기 때문에 tsc에서 돔 옵션을 켜줘야한다.
{
  "compilerOptions": {
    "lib": ["dom","es2015"]
  }
}
{
  "compilerOptions": {
    "lib": ["webworker","es2015"]
  }
}
*/



// postMessage api를 이용하면 다른 스레드에 거의 모든 종류의 데이터를 전달 할 수 있다.
// 메인스레드는 워커 스레드로 실행을 전환하기 전에 전달한 데이터를 복제할 것이다.
// 한편 웹 워커에서는 전역적으로 이용할 수있는 onmessage APi로 들어오는 이벤트를 리스닝한다.

