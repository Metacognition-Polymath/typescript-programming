/* 6.8 프로토타입 안전하게 확장하기

자바스크립트 응용 프로그램을 만들 때 내장 타입의 프로토타입을 확장하는 것은 안전하지 않다고 알려져 있다. 이 규칙은 제이쿼리(jQuery) 이전, 즉 자바스크립트 현자가 MooTools 같이 내장 프로토타입 메서드를 직접 확장하고 덮어쓴 라이브러리를 만들기 이전 시대로 거슬러 올라간다. 하지만 동시에 많은 개발자가 프로토타입을 나름의 방식으로 강화하기 시작하면서 충돌 문제가 생겼다. 정적 타입 시스템 없이는, 런타임에 발생하는 충돌로 열받은 사용자가 신고하기 전까지 문제를 알아낼 수도 없었다.

기존 자바스크립트 개발자가 아니라면 자바스크립트

에서는 모든 내장 메서드(


0.push, 'abc',toUpperCase, Object.assign 등)를 런타임에 바꿀 수 있다.는 사실에 놀랄 것이다. 자바스크립트는 동적 언어이므로 객체의 모든 내장 프로토타입(Array.prototype, Func tion.prototype, Object.prototype 등)에 접근할 수 있다.

예전에는 프로토타입 확장이 안전하지 않은 일이었지만 이제 타입스크립트처럼 정적 타입 시스템을 이용하면 안전하게 확장할 수 있다. 8

예시를 위해 Array 프로토타입에 zip 메서드를 추가해보자. 프로토타입을 안전하게 확장하기 위해 두 단계로 진행할 것이다. 먼저 .ts 파일(예: zip.ts)에서 Array의 프로토타입을 확장한 다음 새로운 zip 메서드를 프로토타입에 추가한다.

// 타입스크립트에 zip이 무엇인지 설명 interface Array<T> { O zip<U>(list: U[]): [T, U] [] }

// .zip 77 Array.prototype.zip = function <T, U>( this: T[], ② list: U[] ): [T, U] [] { return this.map((v, k) => tuple(v, list[k]) ③ }

0 우선 타입스크립트에게 zip을 Array에 추가하도록 지시했다. 인터페이스 합치기("5.4.1 선언 합침” 참고) 기능을 이용해 전역 범위로 정의 된 Array<T> 인터페이스에 zip 메서드를 추가했다.

파일에서 임포트(import)나 익스포트(export)를 명시하지 않았으므로 (“10.2.3 모듈 모드 vs. 스크립트 모드”에서 설명하는 스크립트 모드를 의미함) 기존의 전역 인터페이스와 같은 이름인 Array<T> 인터페이스를 직접 선

8. 코드 이식성 높이기, 의존성 그래프를 조금 더 명시적으로 만들기, 실제 사용하는 메서드만 로딩해 성능 개선하기 등 프로토타입을 확장하지 않으려는 이유는 다양하다. 하지만 안전성은 더 이상 그 이유가 되지 못한다.


언할 수 있었고 타입스크립트는 자동으로 둘을 합쳐준다. 파일이 모듈 모드(예를 들어 zip을 구현하는데 뭔가를 import해야 하는 상황)라면 전역 확장을 declare global이라는 타입 선언("11.1 타입 선언” 참고)으로 감싸야 한다.

declare global { interface Array<T> {{ zip<U>(list: U]): [T, U] [] } }

global은 전역으로 정의된 모든 값(import를 사용하지 않고도 모듈 모드의 파일에서 사용할 수 있는 모든 것; 10장 참고)을 포함하는 특별한 네임스페이스로, 이를 이용하면 모듈 모드의 파일에서 전역 범위에 존재하는 이름들도 확장할 수 있게 된다.

② 그리고 Array의 프로토타입에 zip 메서드를 구현했다. this 타입을 사용하여 타입스크립트가 .zip이 호출되는 대상 배열에서 T 타입을 올바로 추론할 수 있도록 했다.

③ 타입스크립트는 이 매핑 함수의 반환 타입을 (T | U) []로 추론하므로(타입스크립트는 이 반환 타입이 항상 0번째 인덱스는 T이고, 1번째 인덱스는 U인 튜플'임을 알아낼 만큼 영리하지는 않다), 타입 어서션 없이 튜플을 만들기 위해 앞서 소개한 tuple 유틸리티(6.4.1 튜플의 타입 추론 개선”에서만듦)를 이용했다.

interface Array<T>를 선언할 때 전역 Array 네임스페이스에 추가했다. 즉, 다른 파일에서 zip.ts를 임포트하지 않아도 [].zip을 이용할 수 있으리라 짐작된다. 하지만 Array.prototype에 기능을 추가하려면 zip을 사용하는 모든 파일이 zip.ts를 먼저 로드해야 한다. 이떻게 zip을 사용하는 모든 파일이 zip.ts를 먼저 로드하도록 할 수 있을까?

쉬다. 프로젝트에서 zip.ts를 명시적으로 제외하도록 tsconfig.json을 수정하자. 그러면 이 기능을 사용하는 쪽에서 명시적으로 임포트해야 한다.


{ * exclude *: [ "./zip.ts" }

이제 다음처럼 안전하게 zip을 사용할 수 있다.

import './zip' [1, 2, 3] .map(n => n * 2) // number() .zip(['a', 'b', 'c']) // [number, string] []

이 코드를 실행하면 배열에 매핑과 압축(zip)을 차례로 실행한 결과를 얻을 수 있다.

[2, 'a'], [4, 'b'], [6, 'c'] 1
 */